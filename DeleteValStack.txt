#include<iostream>
using namespace std;
template <class T>
class stack {
public:
	T* data;
	int count;
	int size;

	stack(int size)
	{
		this -> size = size;
		data = new T[size];
		count = -1;
	}
	void push(T val)
	{
		if (size - count > 1)
		{
			count++;
			data[count] = val;
		}
		else
		{
			cout << "Stack Overflow!";
		}
	}
	void pop()
	{
		if (count >= 0)
		{
			count--;
		}
		else
		{
			cout << "Stack underflow!";

		}
	}
	T top()
	{
		if (count >= 0)
		{
			return data[count];
		}
		else
		{
			cout << "Stack Empty!";
			return T();
		}
	}
	bool empty()
	{
		return count == -1;
	}
};
void deleteval(stack<int>& s)
{
	int val;
	cout << "Enter the value you want to delete in Stack: ";
	cin >> val;
	stack <int> tempStack(s.size);

	while (1)
	{
		if (s.empty())
			break;
		else if (val == s.top())
		{
			s.pop();
			break;
		}
		else {
			tempStack.push(s.top());
			s.pop();
		}
	}
	while (!tempStack.empty())
	{
		s.push(tempStack.top());
		tempStack.pop();
	}
}
int main()
{
	stack<int>  s(5);
	s.push(1);
	s.push(2);
	s.push(3);
	s.push(4);


	deleteval(s);

	// Print the modified stack
	
	while (!s.empty()) {
		cout << s.top() << " ";
		s.pop();
	}
		return 0;
}